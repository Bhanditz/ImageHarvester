akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    deployment {
      /masterSender = {
        router = broadcast-group
        routees.paths = ["/user/clusterMaster"]
        cluster {
          enabled = on
          use-role = clusterMaster
          allow-local-routees = off
        }
      }
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2556
    }
  }

  cluster {
    roles = [nodeSupervisor]
    seed-nodes = ["akka.tcp://ClusterSystem@127.0.0.1:5555"]
    auto-down-unreachable-after = 100s
    unreachable-nodes-reaper-interval = 10s

    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      heartbeat-interval = 5s
      threshold = 10.0
      acceptable-heartbeat-pause = 600s
    }
  }
}

my-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 1

    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 8.0

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 100
  }

  throughput = 100
}

processer-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 1

    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 8.0

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 100
  }

  throughput = 100
}

slave {
  nrOfDownloaderSlaves = 5
  nrOfExtractorSlaves = 10
  nrOfPingerSlaves = 5
  nrOfRetries = 5
  taskNrLimit = 10
  pathToSave = "/tmp/europeana"
  responseType = diskStorage
  colorMap = "/Users/paul/Documents/workspace/ImageHarvester/src/test/resources/colormap.png"
}

metrics {
  slaveID="tests_crf_europeana_eu"
  graphiteServer = "178.63.68.66"
  graphitePort = 2003
}

#media-storage-type = SWIFT

#media-storage {
#  source = "crf-harvester"
#  authUrl = "https://auth.hydranodes.de:5000/v2.0"
#  tenantName = "d35f3a21-cf35-48a0-a035-99bfc2252528.swift.tenant@a9s.eu"
#  userName = "c9b9ddb5-4f64-4e08-9237-1d6848973ee1.swift.user@a9s.eu"
#  password = "78ae7i9XO3O7CcdkDa87"
#  regionName = "hydranodes"
#
#}

#media-storage-type = S3

#media-storage {
#    client_key = "client_key"
#    secret_key = "secret_key"
#    region = "region"
#    bucket = "bucket"
#}


media-storage-type = BLUEMIX

media-storage {
    client_key = "REMOVED"
    secret_key = "REMOVED"
    region = "eu-geo"
    bucket = "europeana-thumbnails-test"
    endpoint = "https://s3.eu-geo.objectstorage.softlayer.net"
}